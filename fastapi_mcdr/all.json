{
  "meta": {
    "schema_version": 4,
    "id": "fastapi_mcdr",
    "name": "FastAPI MCDR",
    "version": "1.0.0",
    "link": "https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/src/fastapi_mcdr",
    "authors": [
      "Andy Zhang"
    ],
    "dependencies": {},
    "requirements": [
      "fastapi",
      "uvicorn"
    ],
    "description": {
      "en_us": "Provides HTTP API.",
      "zh_cn": "提供 HTTP API。"
    }
  },
  "plugin": {
    "schema_version": 1,
    "id": "fastapi_mcdr",
    "authors": [
      "Andy Zhang"
    ],
    "repository": "https://github.com/AnzhiZhang/MCDReforgedPlugins",
    "branch": "master",
    "related_path": "src/fastapi_mcdr",
    "labels": [
      "api"
    ],
    "introduction": {
      "en_us": "# FastAPI\n\n[简体中文](https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/src/fastapi_mcdr/readme_cn.md)\n\n> Provides HTTP API\n\n## Quick Start\n\nIn general, there are two things you need to do in your plugin:\n\n1. Check FastAPI's status when loading. If it's ready for registration, directly register the API.\n2. Register a listener for the ACCEPT event to register the API when it becomes acceptable.\n\nSpecifically, you need to add the following code:\n\n```python\ndef on_load(server, prev_module):\n    # register if fastapi_mcdr is ready\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n    if fastapi_mcdr is not None and fastapi_mcdr.is_ready():\n        register_apis(server)\n\n    # register event listener\n    server.register_event_listener(\n        \"fastapi_mcdr.accept\",\n        register_apis\n    )\n\ndef register_apis(server):\n    # save plugin id and fastapi_mcdr instance\n    id_ = server.get_self_metadata().id\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n\n    # register api\n    fastapi_mcdr.add_api_route(\n        id_,\n        path=\"/test\",\n        endpoint=test,\n        response_model=Dict[str, str],\n        methods=[\"GET\"],\n    )\n\nasync def test():\n    return \"Hello, world!\"\n```\n\nVisit <http://localhost:8080/docs> to view the API documentation.\n\n## Technical Details\n\n### Loading\n\nIn theory, providing an HTTP API externally should be a soft dependency. That's why checking FastAPI's status and registering an ACCEPT event listener are necessary. The following diagram illustrates the process of loading FastAPI and custom plugins:\n\nLoad FastAPI first, then load custom plugins:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI Load\n    Note right of FastAPI: FastAPI Dispatch ACCEPT Event\n\n    Note left of Test: Test Load\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: Register API\n\n    Note left of Test: Test Register ACCEPT Event\n```\n\nLoad custom plugins first, then load FastAPI:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note left of Test: Test Load\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: No!\n\n    Note left of Test: Test Register ACCEPT Event\n\n    Note right of FastAPI: FastAPI Load\n\n    FastAPI ->> Test: Dispatch ACCEPT Event\n    Test ->> FastAPI: Register API\n```\n\nWith this design, you can achieve soft plugin dependency without worrying about the order of plugin loading. The following diagram shows the scenario of any plugin being reloaded:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI Reload\n\n    FastAPI ->> Test: Dispatch ACCEPT Event\n    Test ->> FastAPI: Register API\n\n    Note left of Test: Test Reload\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: Register API\n\n    Note left of Test: Test Register ACCEPT Event\n```\n\n## Standards\n\n### ACCEPT Event\n\nEvent name: `fastapi_mcdr.accept`\n\nAn instance of `PluginEvent` for this event is also exposed as `ACCEPT_EVENT`.\n\n### Public Functions\n\n#### is_ready\n\nThe plugin's status for accepting registration. If forcefully registered, it will raise a `RuntimeError`.\n\n#### add_api_route\n\nAccepts parameters almost identical to the `add_api_route` function of the fastapi library. However, the first parameter `plugin_id` should be the plugin id, so that the plugin id is used as a prefix when registering the path.\n\nIn other words, if the id parameter is `test` and the path parameter is `/test`, then the registered path is `/test/test`.\n",
      "zh_cn": "# FastAPI\n\n[English](https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/src/fastapi_mcdr/readme.md)\n\n> 提供 HTTP API\n\n## 快速开始\n\n总地来说，您需要在您的插件中做两件事：\n\n1. 加载时检查 FastAPI 状态，如已可以接受注册，则直接注册 API。\n1. 直接注册 ACCEPT 事件的监听器，以便可以注册时注册 API。\n\n具体地说，您需要添加以下代码：\n\n```python\ndef on_load(server, prev_module):\n    # register if fastapi_mcdr is ready\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n    if fastapi_mcdr is not None and fastapi_mcdr.is_ready():\n        register_apis(server)\n\n    # register event listener\n    server.register_event_listener(\n        \"fastapi_mcdr.accept\",\n        register_apis\n    )\n\ndef register_apis(server):\n    # save plugin id and fastapi_mcdr instance\n    id_ = server.get_self_metadata().id\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n\n    # register api\n    fastapi_mcdr.add_api_route(\n        id_,\n        path=\"/test\",\n        endpoint=test,\n        response_model=Dict[str, str],\n        methods=[\"GET\"],\n    )\n\nasync def test():\n    return \"Hello, world!\"\n```\n\n访问 <http://localhost:8080/docs> 即可查看 API 文档。\n\n## 技术细节\n\n### 加载\n\n理论上来说，对外提供 HTTP API 应当是一种软依赖，这便是需要检查 FastAPI 状态并同时注册 ACCEPT 事件监听器的原因。下图展示了 FastAPI 插件和自定义插件先后加载的流程图：\n\n先加载 FastAPI，再加载自定义插件：\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI 加载\n    Note right of FastAPI: FastAPI 分发 ACCEPT 事件\n\n    Note left of Test: Test 加载\n\n    Test ->> FastAPI: 已加载？\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: 注册 API\n\n    Note left of Test: Test 注册 ACCEPT 事件\n```\n\n先加载自定义插件，再加载 FastAPI：\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note left of Test: Test 加载\n\n    Test ->> FastAPI: 已加载？\n    FastAPI ->> Test: No!\n\n    Note left of Test: Test 注册 ACCEPT 事件\n\n    Note right of FastAPI: FastAPI 加载\n\n    FastAPI ->> Test: 分发 ACCEPT 事件\n    Test ->> FastAPI: 注册 API\n```\n\n通过这个设计，即可实现插件的软依赖，且无需考虑插件加载顺序的问题。下图展示了任意插件重载的情况：\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI 重载\n\n    FastAPI ->> Test: 分发 ACCEPT 事件\n    Test ->> FastAPI: 注册 API\n\n    Note left of Test: Test 重载\n\n    Test ->> FastAPI: 已加载？\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: 注册 API\n\n    Note left of Test: Test 注册 ACCEPT 事件\n```\n\n## 标准\n\n### ACCEPT 事件\n\n事件名：`fastapi_mcdr.accept`\n\n该事件的 `PluginEvent` 实例也会以 `ACCEPT_EVENT` 名公开。\n\n### 公开函数\n\n#### is_ready\n\n插件可以接受注册的状态，如强行注册则会抛出一个 `RuntimeError`。\n\n#### add_api_route\n\n接受的参数几乎与 fastapi 库的 `add_api_route` 函数相同，但是第一个参数 `plugin_id` 应当传入插件的 id，以便注册路径时以插件 id 为前缀。\n\n也就是说，如果 id 参数为 `test`，path 参数为 `/test`，则注册的路径为 `/test/test`。\n"
    }
  },
  "release": null,
  "repository": {
    "url": "https://github.com/AnzhiZhang/MCDReforgedPlugins",
    "name": "MCDReforgedPlugins",
    "full_name": "AnzhiZhang/MCDReforgedPlugins",
    "html_url": "https://github.com/AnzhiZhang/MCDReforgedPlugins",
    "description": "MCDReforged Plugins",
    "archived": false,
    "stargazers_count": 93,
    "watchers_count": 93,
    "forks_count": 56,
    "readme": "# FastAPI\n\n[简体中文](https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/src/fastapi_mcdr/readme_cn.md)\n\n> Provides HTTP API\n\n## Quick Start\n\nIn general, there are two things you need to do in your plugin:\n\n1. Check FastAPI's status when loading. If it's ready for registration, directly register the API.\n2. Register a listener for the ACCEPT event to register the API when it becomes acceptable.\n\nSpecifically, you need to add the following code:\n\n```python\ndef on_load(server, prev_module):\n    # register if fastapi_mcdr is ready\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n    if fastapi_mcdr is not None and fastapi_mcdr.is_ready():\n        register_apis(server)\n\n    # register event listener\n    server.register_event_listener(\n        \"fastapi_mcdr.accept\",\n        register_apis\n    )\n\ndef register_apis(server):\n    # save plugin id and fastapi_mcdr instance\n    id_ = server.get_self_metadata().id\n    fastapi_mcdr = server.get_plugin_instance('fastapi_mcdr')\n\n    # register api\n    fastapi_mcdr.add_api_route(\n        id_,\n        path=\"/test\",\n        endpoint=test,\n        response_model=Dict[str, str],\n        methods=[\"GET\"],\n    )\n\nasync def test():\n    return \"Hello, world!\"\n```\n\nVisit <http://localhost:8080/docs> to view the API documentation.\n\n## Technical Details\n\n### Loading\n\nIn theory, providing an HTTP API externally should be a soft dependency. That's why checking FastAPI's status and registering an ACCEPT event listener are necessary. The following diagram illustrates the process of loading FastAPI and custom plugins:\n\nLoad FastAPI first, then load custom plugins:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI Load\n    Note right of FastAPI: FastAPI Dispatch ACCEPT Event\n\n    Note left of Test: Test Load\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: Register API\n\n    Note left of Test: Test Register ACCEPT Event\n```\n\nLoad custom plugins first, then load FastAPI:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note left of Test: Test Load\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: No!\n\n    Note left of Test: Test Register ACCEPT Event\n\n    Note right of FastAPI: FastAPI Load\n\n    FastAPI ->> Test: Dispatch ACCEPT Event\n    Test ->> FastAPI: Register API\n```\n\nWith this design, you can achieve soft plugin dependency without worrying about the order of plugin loading. The following diagram shows the scenario of any plugin being reloaded:\n\n```mermaid\nsequenceDiagram\n    participant FastAPI\n    participant Test\n\n    Note right of FastAPI: FastAPI Reload\n\n    FastAPI ->> Test: Dispatch ACCEPT Event\n    Test ->> FastAPI: Register API\n\n    Note left of Test: Test Reload\n\n    Test ->> FastAPI: Loaded?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: is_ready?\n    FastAPI ->> Test: Yes!\n    Test ->> FastAPI: Register API\n\n    Note left of Test: Test Register ACCEPT Event\n```\n\n## Standards\n\n### ACCEPT Event\n\nEvent name: `fastapi_mcdr.accept`\n\nAn instance of `PluginEvent` for this event is also exposed as `ACCEPT_EVENT`.\n\n### Public Functions\n\n#### is_ready\n\nThe plugin's status for accepting registration. If forcefully registered, it will raise a `RuntimeError`.\n\n#### add_api_route\n\nAccepts parameters almost identical to the `add_api_route` function of the fastapi library. However, the first parameter `plugin_id` should be the plugin id, so that the plugin id is used as a prefix when registering the path.\n\nIn other words, if the id parameter is `test` and the path parameter is `/test`, then the registered path is `/test/test`.\n",
    "readme_url": "https://raw.githubusercontent.com/AnzhiZhang/MCDReforgedPlugins/master/src/fastapi_mcdr/readme.md"
  }
}